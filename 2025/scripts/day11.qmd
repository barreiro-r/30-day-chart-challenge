---
title: "#30DayChartChallenge"
format: html
echo: false
warning: false
message: false
---

# 30DayChartChallenge
## Day 11 -  Stripes

```{r setup}
library(tidyverse)
library(janitor)
library(ggrepel)
library(ggtext)
library(stringr)
library(scales)
library(MetBrewer)
library(lubridate)
library(ggh4x)

theme_set(
    theme_minimal() +
    theme(
    # axis.line.x.bottom = element_line(color = '#474747', linewidth = .3),
    # axis.ticks.x= element_line(color = '#474747', linewidth = .3),
    axis.line.y.left = element_line(color = '#474747', linewidth = .3),
    axis.ticks.y= element_line(color = '#474747', linewidth = .3),
    panel.grid = element_line(linewidth = .3, color = 'grey90'),
    panel.grid.major.x = element_blank(),
    panel.grid.minor = element_blank(),
    axis.ticks.length = unit(-0.15, "cm"),
    plot.background = element_blank(),
    plot.title.position = "plot",
    plot.title = element_text(family = "Ubuntu", size = 14, face = 'bold'),
    plot.caption = element_text(size = 6, color = '#474747',margin = margin(10,0,0,0)),
    plot.subtitle = element_text(size = 10,lineheight = 1.15, margin = margin(0,0,20,0)),
    axis.title.x = element_markdown(family = "Ubuntu", hjust = .5, size = 9),
    axis.title.y = element_markdown(family = "Ubuntu", hjust = .5, size = 8),
    axis.text = element_markdown(family = "Chakra Petch", hjust = .5, size = 8, color = "#474747"),
    legend.position = "top",
    text = element_text(family = "Ubuntu"),
    plot.margin = margin(25, 25, 25, 25))

)
```


### Preparing data for plot
```{r}
data2plot <- 
  read_csv('2025/datasets/city_temperature.csv') |>
  janitor::clean_names() |>
  filter(country == 'Brazil') |>
  filter(avg_temperature > 0) |>
  mutate(
    month_abbr = month(month, label = TRUE, abbr = TRUE),
    month_abbr = factor(month_abbr, levels = month(1:12, label = TRUE, abbr = TRUE))) |>
  mutate(avg_temperature = (avg_temperature - 32) * 5 / 9)
```

# Metric for the win
```{r}
celsius_label <- function(c_temps, digits = 1) {
  c_temps_rounded <- round(c_temps, digits = digits)
  formatted_labels <- paste0(c_temps_rounded, "°C")
  return(formatted_labels)
}
```

```{r}
# 1. Find the min and max year FOR EACH city-month combination
month_year_bounds <- data2plot |>
  group_by(city, month) |>
  summarise(
    min_year_for_month = min(year, na.rm = TRUE),
    max_year_for_month = max(year, na.rm = TRUE),
    .groups = 'drop'
  )

# 2. Join these bounds back to the original data and filter
filtered_data <- data2plot |>
  left_join(month_year_bounds, by = c("city", "month")) |>
  filter(year == min_year_for_month | year == max_year_for_month)

# 3. Group the filtered data and calculate statistics
summary_table <- filtered_data |>
  group_by(city, year, month, min_year_for_month, max_year_for_month) |>
  summarise(
    monthly_avg_temp = mean(avg_temperature, na.rm = TRUE),
    monthly_sd_temp = sd(avg_temperature, na.rm = TRUE),
    .groups = 'drop'
  ) |>
  # 4. Add the category column based on comparison with the month's bounds
  mutate(
    record_type = case_when(
      min_year_for_month == max_year_for_month ~ "Single Year Record for Month",
      year == min_year_for_month ~ "Oldest Record for Month",
      year == max_year_for_month ~ "Newest Record for Month",
      TRUE ~ NA
    )
  ) |>
  # 5. Select and reorder final columns
  select(city, year, month, monthly_avg_temp, monthly_sd_temp, record_type) |>
  arrange(city, month, year) |>
  mutate(
    month_abbr = month(month, label = TRUE, abbr = TRUE),
    month_abbr = factor(month_abbr, levels = month(1:12, label = TRUE, abbr = TRUE)))
```

```{r}
delta_data <- summary_table |>
  select(city, month_abbr, record_type, monthly_avg_temp) |>
  pivot_wider(
    names_from = record_type,
    values_from = monthly_avg_temp
  ) |>
  mutate(
    temp_diff = `Newest Record for Month` - `Oldest Record for Month`,
    arrow = case_when(
      temp_diff > 0 ~ "▲",
      temp_diff < 0 ~ "▼",
      TRUE          ~ " "
    ),
    direction = case_when(
      temp_diff > 0 ~ 1,
      temp_diff < 0 ~ -1,
      TRUE          ~ 0
    ),
    label = str_c(arrow,' ',celsius_label(temp_diff))
  )

```

# Plotting
```{r}
data2plot |>
  ggplot(aes(x = month_abbr, y = avg_temperature)) +
  geom_point(aes(color = year), position = 'jitter', size = .1) +
  # White shadow/border
  geom_segment(
    data = summary_table,
    aes(
      x     = as.numeric(month_abbr) - 0.4,
      xend  = as.numeric(month_abbr) + 0.4,
      y     = monthly_avg_temp,
      yend  = monthly_avg_temp,
      group = year
    ), 
    color = 'white',
    size = 2
  ) +  
  geom_segment(
    data = summary_table,
    aes(
      x     = as.numeric(month_abbr) - 0.4,
      xend  = as.numeric(month_abbr) + 0.4,
      y     = monthly_avg_temp,
      yend  = monthly_avg_temp,
      color = year
    )
  ) +
  geom_text(
    data = delta_data,
    y = 35,
    aes(label = label, fill_delta_label = direction),
    size = 2.5,
    show_guide = FALSE
  ) +
  # --- I was adding dot and erro, but looked to busy ---
  # geom_point(
  #   data = summary_table, 
  #   aes(y = monthly_avg_temp, group = year), 
  #   size = 4, color = 'white',
  #   position = position_dodge(width = 1)) +
  # geom_errorbar(
  #   data = summary_table,
  #   y = NA,
  #   aes(
  #     ymin = monthly_avg_temp - monthly_sd_temp, 
  #     ymax = monthly_avg_temp + monthly_sd_temp,
  #     group = year), 
  #   size = 2, color = 'white', width = .3,
  #   position = position_dodge(width = 1)) +
  # geom_point(
  #   data = summary_table, 
  #   aes(y = monthly_avg_temp, color = year, group = year), 
  #   size = 2,
  #   position = position_dodge(width = 1)) +
  # geom_errorbar(
  #   data = summary_table,
  #   y = NA,
  #   aes(
  #     ymin = monthly_avg_temp - monthly_sd_temp, 
  #     ymax = monthly_avg_temp + monthly_sd_temp,
  #     color = year,
  #     group = year), 
  #   size = .5, width = .3,
  #   position = position_dodge(width = 1)) +
  facet_wrap(~city, nrow = 3, scales = 'free') +
  ggh4x::scale_colour_multi(
    aesthetics = c("fill_delta_label"),
    name = list("delta"),
    colours = list(
        c("dodgerblue3", 'red')
  )) +
  scale_color_gradientn(
    colours = MetBrewer::MetPalettes$Cassatt1[[1]],
    breaks = c(1995,2020)
  ) +
  scale_y_continuous(
    label = celsius_label, 
    limits = c(5,40),
    breaks = c(5,15,30,40),
    expand = c(0,0,0,0)) +
  theme(
    strip.text = element_text(face = 'bold'),
    legend.position = 'bottom',
    legend.,
  ) +
  labs(
    x = NULL,
    y = "Daily Average Temperature",
    color = NULL,
    title = 'Daily Temperature Changes in Major Cities',
    subtitle = str_wrap("Each dot represents a day’s average temperature in 1995 and 2020, with vertical lines marking monthly means. Despite noticeable variance, the overall trend shows shifting temperatures.", width = 100),
    caption = 'SOURCE Kaggle Daily Temperature of Major Cities'
  ) +
  guides(
    color = guide_colorbar(
      barwidth = 6,  # controls the thickness of the color bar
      barheight = .5    # controls the length of the color bar
    )
  )

  
```
