---
title: "#30DayChartChallenge"
format: html
echo: false
warning: false
message: false
---

# 30DayChartChallenge
## Day 11 -  Stripes

```{r setup}
library(tidyverse)
library(janitor)
library(ggrepel)
library(ggtext)
library(stringr)
library(scales)
library(MetBrewer)
library(lubridate)
library(ggh4x)

theme_set(
    theme_minimal() +
    theme(
    # axis.line.x.bottom = element_line(color = '#474747', linewidth = .3),
    # axis.ticks.x= element_line(color = '#474747', linewidth = .3),
    # axis.line.y.left = element_line(color = '#474747', linewidth = .3),
    # axis.ticks.y= element_line(color = '#474747', linewidth = .3),
    panel.grid = element_line(linewidth = .3, color = 'grey90'),
    panel.grid.major.x = element_blank(),
    panel.grid.minor = element_blank(),
    axis.ticks.length = unit(-0.15, "cm"),
    plot.background = element_blank(),
    plot.title.position = "plot",
    plot.title = element_text(family = "Ubuntu", size = 14, face = 'bold'),
    plot.caption = element_text(size = 6, color = '#474747',margin = margin(10,0,0,0)),
    plot.subtitle = element_text(size = 10,lineheight = 1.15, margin = margin(0,0,20,0)),
    axis.title.x = element_markdown(family = "Ubuntu", hjust = .5, size = 9),
    axis.title.y = element_markdown(family = "Ubuntu", hjust = .5, size = 8),
    axis.text = element_markdown(family = "Chakra Petch", hjust = .5, size = 8, color = "#474747"),
    legend.position = "top",
    text = element_text(family = "Ubuntu"),
    plot.margin = margin(25, 25, 25, 25))
)
```


### Preparing data for plot
```{r}
data2plot <- 
  read_csv('2025/datasets/city_temperature.csv') |>
  janitor::clean_names() |>
  filter(country == 'Brazil') |>
  filter(avg_temperature > 0) |>
  mutate(
    month_abbr = month(month, label = TRUE, abbr = TRUE),
    month_abbr = factor(month_abbr, levels = month(1:12, label = TRUE, abbr = TRUE))) |>
  mutate(avg_temperature = (avg_temperature - 32) * 5 / 9) |>
  mutate(date = make_date(2222,month,day)) |>
  filter(year >= 1995, year < 2020) |>
  mutate(date = as.POSIXct(date, format = "%Y-%m-%d"))
```

# Metric for the win
```{r}
celsius_label <- function(c_temps, digits = 1) {
  c_temps_rounded <- round(c_temps, digits = digits)
  formatted_labels <- paste0(c_temps_rounded, "°C")
  return(formatted_labels)
}
```

```{r}
# --- Thank you GPT ---
unscale_datetime <- function(scaled_value) {
  # Define the original datetime boundaries.
  lower <- as.POSIXct("2222-01-01", tz = "UTC")
  upper <- as.POSIXct("2222-12-31", tz = "UTC")
  
  # Define the target numeric range from the forward scale.
  lower_val <- 19
  upper_val <- 26
  
  # Convert boundaries to numeric (seconds since the epoch)
  lower_num <- as.numeric(lower)
  upper_num <- as.numeric(upper)
  
  # Compute the numeric datetime corresponding to scaled_value
  datetime_num <- lower_num + ((scaled_value - lower_val) / (upper_val - lower_val)) * (upper_num - lower_num)
  
  # Convert the numeric value back to a POSIXct datetime.
  as.POSIXct(datetime_num, origin = "1970-01-01", tz = "UTC")
}

scale_datetime <- function(datetime) {
  # Define the lower and upper bounds as POSIXct dates.
  lower <- as.POSIXct("2222-01-01", tz = "UTC")
  upper <- as.POSIXct("2222-12-31", tz = "UTC")
  
  # Define the target numeric range.
  lower_val <- 19
  upper_val <- 26
  
  # Convert datetime values to numeric (seconds since epoch)
  datetime_num <- as.numeric(datetime)
  lower_num <- as.numeric(lower)
  upper_num <- as.numeric(upper)
  
  # Perform linear transformation
  scaled_value <- lower_val + ((datetime_num - lower_num) / (upper_num - lower_num)) * (upper_val - lower_val)
  
  return(str_c(round(scaled_value),'ºC'))
}

# --- 

year_avg_tmp <- 
  data2plot |>
  group_by(city, year) |>
  summarise(year_avg_temp = mean(avg_temperature)) |>
  ungroup()

year_avg_tmp$year_avg_temp <- unscale_datetime(year_avg_tmp$year_avg_temp)

data2plot |> 
  ggplot(aes(x = year, y = date)) +
  geom_tile(aes(fill = avg_temperature), size = 0, show.legend = TRUE) +
  geom_line(data = year_avg_tmp, aes(y = year_avg_temp), color = '#474747') +
  facet_wrap(city ~ ., scales = 'free', ncol = 1) +
  scale_fill_gradientn(
    colours = rev(MetBrewer::MetPalettes$Hiroshige[[1]]),
    breaks = round(c(min(data2plot$avg_temperature)+1,max(data2plot$avg_temperature)-1)),
    label = function(x) str_c(x,'ºC')
  ) +
  scale_y_datetime(
    expand = c(0,0),
    breaks = c(as.POSIXct("2222-01-15"), as.POSIXct("2222-12-15")),
    date_labels = "%b",
    sec.axis = sec_axis(
      ~.,
      name = 'Year AVG temperature', 
      label = scale_datetime,
      breaks = c(unscale_datetime(19),unscale_datetime(26))
    )
  ) +
  scale_x_continuous(
    expand = c(0,0,0,0),
    breaks = seq(1995,2019,1),
    label = function(x) str_replace(x,'.*(..)$',"\\1'")
  ) +
  labs(
    x = NULL,
    y = NULL,
    fill = "Daily Average Temperature",
    title = 'Daily Temperature in Brazil',
    subtitle = str_wrap("Each line represents a day’s average temperature in 1995 and 2020, with vertical lines marking monthly means of the 1995 and 2020.", width = 80),
    caption = 'SOURCE Kaggle Daily Temperature of Major Cities'
  ) +
  theme(
    legend.ticks = element_blank(),
    legend.title = element_text(size = 9),
    legend.justification = "left",
    legend.box.just = "left"
  ) +
  guides(
    fill = guide_colorbar(
      barwidth = 13,
      barheight = .3,
      title.position = "top",
      label.position = "bottom",
      position = 'bottom',
    )
  )


```
